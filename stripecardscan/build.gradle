apply from: configs.androidLibrary

apply plugin: 'kotlin-kapt'
// apply plugin: 'checkstyle'
apply plugin: "org.jetbrains.kotlin.plugin.parcelize"
apply plugin: 'org.jetbrains.kotlin.plugin.serialization'
apply plugin: 'com.android.library'
apply plugin: 'maven-publish'

android {
    buildFeatures {
        viewBinding true
    }

    testOptions {
        unitTests {
            // Note: without this, all Robolectric tests using assets will fail.
            includeAndroidResources = true
            all {
                maxHeapSize = "1024m"
            }
        }
    }

    packagingOptions {
        pickFirst 'META-INF/AL2.0'
        pickFirst 'META-INF/LGPL2.1'
    }

    lintOptions {
        disable "UnrememberedMutableState"
    }
}

configurations {
    packaging
}

dependencies {

    packaging project(path: ':stripe-core', configuration: 'default')
    packaging project(path: ':camera-core', configuration: 'default')
    packaging project(path: ':ml-core:cardscan', configuration: 'default')
    packaging project(path: ':ml-core:base', configuration: 'default')
    packaging project(path: ':stripecardscan-tflite', configuration: 'default')

    api project(":stripe-core")
    implementation project(":camera-core")

    implementation project(":ml-core:cardscan")

    implementation "androidx.appcompat:appcompat:$androidxAppcompatVersion"
    implementation "androidx.constraintlayout:constraintlayout:$androidxConstraintlayoutVersion"
    implementation "androidx.fragment:fragment-ktx:$androidxFragmentVersion"
    implementation "androidx.core:core-ktx:$androidxCoreVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinCoroutinesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:$kotlinSerializationVersion"

    testImplementation "androidx.test:core:$androidTestVersion"
    testImplementation "androidx.test:runner:$androidTestRunnerVersion"
    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlinCoroutinesVersion"
    testImplementation "org.mockito:mockito-inline:$mockitoCoreVersion"
    testImplementation "org.mockito.kotlin:mockito-kotlin:$mockitoKotlinVersion"
    testImplementation "com.google.truth:truth:$truthVersion"
    testImplementation "org.robolectric:robolectric:$robolectricVersion"

    androidTestImplementation "androidx.test:rules:$androidTestVersion"
    androidTestImplementation "androidx.test:runner:$androidTestRunnerVersion"
    androidTestImplementation "org.jetbrains.kotlin:kotlin-test:$kotlinVersion"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$kotlinCoroutinesVersion"
    androidTestImplementation "androidx.test:core-ktx:1.5.0"
    androidTestUtil "androidx.test:orchestrator:$androidTestOrchestratorVersion"

    ktlint "com.pinterest:ktlint:$ktlintVersion"
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId 'com.wizdome'
            artifactId 'stripecardscan'
            version '20.17.0'

            // Specify the artifact generated by the Android build (AAR file)
            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")

            // Include the library's dependencies in the POM
            pom.withXml {
                def dependenciesNode = asNode().appendNode('dependencies')
                configurations.packaging.allDependencies.each { dependency ->
                    if (dependency instanceof ProjectDependency) {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dependency.group)
                        dependencyNode.appendNode('artifactId', dependency.name)
                        dependencyNode.appendNode('version', dependency.version)
                    }
                }
            }
        }
    }
    repositories {
        mavenLocal()
    }
}


tasks.named("publishMavenPublicationToMavenLocal").configure {
    dependsOn("assembleRelease")
}




ext {
    artifactId = "stripecardscan"
    artifactName = "stripecardscan"
    artifactDescrption = "The stripecardscan module of Stripe Payment Android SDK"
}

apply from: "${rootDir}/deploy/deploy.gradle"
